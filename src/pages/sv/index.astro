---
import Layout from "@layouts/Layout.astro";
// @ts-ignore
import Map from "@components/Map.vue";
import { getCollection, type CollectionEntry } from "astro:content";
import { useTranslations, getLangFromUrl, getLocalizedUrl } from "@/util/translate";

// Get current language from URL
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Type aliases for better readability
type DishEntry = CollectionEntry<"dishes">;
type DrinkEntry = CollectionEntry<"drinks">;

// Filter content by language using folder structure
const allRestaurants = await getCollection("restaurants");
const allAttractions = await getCollection("attractions");
const allDishesRaw = await getCollection("dishes");
const allDrinksRaw = await getCollection("drinks");

const restaurants = allRestaurants.filter(({ id }) => id.startsWith(`${lang}/`));
const attractions = allAttractions.filter(({ id }) => id.startsWith(`${lang}/`));
const allDishes = allDishesRaw.filter(({ id }) => id.startsWith(`${lang}/`));
const allDrinks = allDrinksRaw.filter(({ id }) => id.startsWith(`${lang}/`));

// Get Karel's must-try dishes and drinks
const karelMustTryDishes: DishEntry[] = allDishes.filter(
  (dish) => dish.data.KarelMustTry === true
);
const karelMustTryDrinks: DrinkEntry[] = allDrinks.filter(
  (drink) => drink.data.KarelMustTry === true
);

// Type guards
const isDish = (item: DishEntry | DrinkEntry): item is DishEntry =>
  "category" in item.data;
const isDrink = (item: DishEntry | DrinkEntry): item is DrinkEntry =>
  "type" in item.data;

// Combine dishes and drinks
const karelMustTryItems: (DishEntry | DrinkEntry)[] = [
  ...karelMustTryDishes,
  ...karelMustTryDrinks,
];

const meta = {
  title: `${t("site.title")} - ${t("hero.subtitle")}`,
  description: t("hero.subtitle"),
};
---

<Layout meta={meta}>
  <main>
    <div class="min-h-screen bg-gradient-to-b from-amber-50 to-white">
      <!-- Hero Section -->
      <section
        class="relative flex h-screen items-center justify-center px-4 text-center"
        style="background-image: url('https://upload.wikimedia.org/wikipedia/commons/6/63/Prague_old_town_square_panorama.jpg'); background-size: cover; background-position: center; background-repeat: no-repeat;"
      >
        <!-- Dark overlay for text readability -->
        <div class="absolute inset-0 bg-black bg-opacity-40"></div>
        
        <div class="relative z-10 mx-auto max-w-4xl">
          <h1 class="mb-6 text-5xl font-bold text-white md:text-7xl drop-shadow-2xl">
            {t("hero.title")}
          </h1>
          <p class="mb-8 text-xl text-white md:text-2xl drop-shadow-lg">
            {t("site.tagline")}
          </p>
          <div class="flex flex-wrap justify-center gap-4">
            <a
              href={getLocalizedUrl("dishes", lang)}
              class="rounded-lg bg-amber-600 px-8 py-3 text-white transition hover:bg-amber-700 shadow-lg backdrop-blur-sm"
            >
              {t("buttons.whatToOrder")}
            </a>
            <a
              href="#must-try"
              class="rounded-lg bg-purple-600 px-8 py-3 text-white transition hover:bg-purple-700 shadow-lg backdrop-blur-sm"
            >
              {t("buttons.myRecommendations")}
            </a>
            <a
              href="#restaurants"
              class="rounded-lg bg-red-600 px-8 py-3 text-white transition hover:bg-red-700 shadow-lg backdrop-blur-sm"
            >
              {t("buttons.myFavoriteSpots")}
            </a>
          </div>
        </div>
      </section>

      <!-- Map Section -->
      <section id="map" class="bg-gray-50 px-4 py-20">
        <div class="mx-auto max-w-6xl">
          <div class="rounded-xl bg-white p-4 shadow-lg">
            <Map
              restaurants={restaurants}
              attractions={attractions}
              lang={lang}
              client:only="vue"
            />
          </div>
        </div>
      </section>

      <!-- Karel's Must-Try Dishes Section -->
      <section id="must-try" class="px-4 py-20">
        <div class="mx-auto max-w-6xl">
          <div class="mb-12 text-center">
            <h2 class="mb-4 text-center text-4xl font-bold text-red-600">
              {t("sections.mustTryTitle")}
            </h2>
            <p class="mx-auto max-w-3xl text-xl text-gray-600">
              {t("sections.mustTrySubtitle")}
            </p>
          </div>

          <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
            {
              karelMustTryItems.slice(0, 6).map((item) => (
                <div class="overflow-hidden rounded-xl border-2 border-purple-200 bg-white shadow-lg transition hover:shadow-xl">
                  <div class="relative h-48 bg-gray-300">
                    {item.data.image && (
                      <img
                        src={item.data.image}
                        alt={item.data.name}
                        class="h-full w-full object-cover"
                      />
                    )}
                    <div class="absolute left-3 top-3">
                      <span class="rounded-full border border-purple-200 bg-purple-100 px-3 py-1 text-xs font-bold text-purple-600">
                        {t("sections.karelHighlyRecommends")}
                      </span>
                    </div>
                  </div>
                  <div class="p-6">
                    <div class="mb-3 flex items-center gap-2">
                      <span
                        class={`rounded-full px-2 py-1 text-xs font-medium ${
                          // Handle dishes
                          isDish(item) && item.data.category === "sladký"
                            ? "bg-amber-100 text-amber-600"
                            : isDish(item) &&
                                item.data.category === "hlavní jídla"
                              ? "bg-red-100 text-red-600"
                              : isDish(item) && item.data.category === "polívky"
                                ? "bg-yellow-100 text-yellow-600"
                                : isDish(item) &&
                                    item.data.category === "snacks"
                                  ? "bg-green-100 text-green-600"
                                  : // Handle drinks
                                    isDrink(item) && item.data.type === "beer"
                                    ? "bg-yellow-100 text-yellow-600"
                                    : isDrink(item) && item.data.type === "soda"
                                      ? "bg-purple-100 text-purple-600"
                                      : isDrink(item) &&
                                          item.data.type === "spirit"
                                        ? "bg-orange-100 text-orange-600"
                                        : "bg-red-100 text-red-600"
                        }`}
                      >
                        {
                          // Handle dishes
                          isDish(item) && item.data.category === "sladký"
                            ? t("categories.sweet")
                            : isDish(item) &&
                                item.data.category === "hlavní jídla"
                              ? t("categories.mainDish")
                              : isDish(item) && item.data.category === "polívky"
                                ? t("categories.soup")
                                : isDish(item) &&
                                    item.data.category === "snacks"
                                  ? t("categories.snack")
                                  : // Handle drinks
                                    isDrink(item) && item.data.type === "beer"
                                    ? t("categories.beer")
                                    : isDrink(item) && item.data.type === "soda"
                                      ? t("categories.drink")
                                      : isDrink(item) &&
                                          item.data.type === "spirit"
                                        ? t("categories.spirit")
                                        : t("categories.wine")
                        }
                      </span>
                    </div>
                    <h3 class="mb-2 text-xl font-bold text-gray-900">
                      {item.data.name}
                    </h3>
                    <p class="mb-4 text-gray-600">{item.data.whyTry}</p>
                    {item.data.whereToGet && (
                      <p class="mb-3 text-xs text-purple-600">
                        <strong>{t("labels.whereToGet")}</strong> {item.data.whereToGet}
                      </p>
                    )}
                  </div>
                </div>
              ))
            }
          </div>

          <div class="mt-12 text-center">
            <a
              href={getLocalizedUrl("dishes", lang)}
              class="inline-block rounded-lg bg-purple-600 px-8 py-3 font-medium text-white transition hover:bg-purple-700"
            >
              {t("buttons.showMeEverything")}
            </a>
          </div>
        </div>
      </section>

      <!-- Restaurant Section -->
      <section id="restaurants" class="px-4 py-20">
        <div class="mx-auto max-w-6xl">
          <h2 class="mb-12 text-center text-4xl font-bold">
            {t("sections.restaurantsTitle")}
          </h2>

          <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
            {
              restaurants.map((restaurant) => (
                <div class="overflow-hidden rounded-xl bg-white shadow-lg transition hover:shadow-xl">
                  <div class="relative h-48 bg-gray-300">
                    {restaurant.data.image && (
                      <img
                        src={restaurant.data.image}
                        alt={restaurant.data.name}
                        class="h-full w-full object-cover"
                      />
                    )}
                  </div>
                  <div class="p-6">
                    <h3 class="mb-2 text-xl font-bold">
                      {restaurant.data.name}
                    </h3>
                    <p class="mb-4 text-gray-600">
                      {restaurant.data.description}
                    </p>
                    <div class="flex items-center justify-between">
                      <span class="text-lg font-semibold text-amber-600">
                        {restaurant.data.priceRange}
                      </span>
                      <a
                        href={getLocalizedUrl(`restaurant/${restaurant.slug}`, lang)}
                        class="font-medium text-red-600 hover:text-red-700"
                      >
                        {t("buttons.viewDetails")}
                      </a>
                    </div>
                  </div>
                </div>
              ))
            }
          </div>
        </div>
      </section>
    </div>
  </main>

  <script>
    // Handle restaurant selection from map
    document.addEventListener("DOMContentLoaded", () => {
      const map = document.querySelector('astro-island[component-url*="Map"]');
      if (map) {
        map.addEventListener("restaurant-selected", (event) => {
          const restaurant = (event as CustomEvent).detail;
          if (restaurant?.slug) {
            window.location.href = `/sv/restaurant/${restaurant.slug}`;
          }
        });
      }
    });
  </script>
</Layout>

<style>
  .line-clamp-2 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
  }
</style>