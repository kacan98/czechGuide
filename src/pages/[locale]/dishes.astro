---
import { SUPPORTED_LOCALES } from "@/config/languages";
import { getLangFromUrl, useTranslations } from "@/util/translate";
import Layout from "@layouts/Layout.astro";
import { getCollection, type CollectionEntry } from 'astro:content';

// Define static paths for all supported locales
export async function getStaticPaths() {
  return SUPPORTED_LOCALES.map(locale => ({
    params: { locale }
  }));
}

// Get current language from URL
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Type aliases for better readability
type DishEntry = CollectionEntry<'dishes'>;
type DrinkEntry = CollectionEntry<'drinks'>;

// Filter content by language
const allDishesRaw = await getCollection('dishes');
const allDrinksRaw = await getCollection('drinks');

const allDishes = allDishesRaw.filter(({ id }) => id.startsWith(`${lang}/`));
const allDrinks = allDrinksRaw.filter(({ id }) => id.startsWith(`${lang}/`));

// Sort dishes within each category by KarelMustTry first, then by order field
const sortDishesByOrder = (dishes: DishEntry[]): DishEntry[] => {
  return dishes.sort((a, b) => {
    // First sort by KarelMustTry (true comes first)
    const karelA = a.data.KarelMustTry ?? false;
    const karelB = b.data.KarelMustTry ?? false;
    if (karelA !== karelB) {
      return  + karelB - +karelA; // true (1) comes before false (0)
    }
    
    // Then sort by order field
    const orderA = a.data.order ?? 999;
    const orderB = b.data.order ?? 999;
    return orderA - orderB;
  });
};

// Sort drinks by KarelMustTry first, then by order field
const sortDrinksByOrder = (drinks: DrinkEntry[]): DrinkEntry[] => {
  return drinks.sort((a, b) => {
    // First sort by KarelMustTry (true comes first)
    const karelA = a.data.KarelMustTry ?? false;
    const karelB = b.data.KarelMustTry ?? false;
    if (karelA !== karelB) {
      return +karelB - +karelA; // true (1) comes before false (0)
    }
    
    // Then sort by order field
    const orderA = a.data.order ?? 999;
    const orderB = b.data.order ?? 999;
    return orderA - orderB;
  });
};

// Category configuration - single source of truth with English keys
const categoryConfig = [
  { key: 'soups', name: t("dishes.categories.pol√≠vky"), icon: 'üç≤', navName: t("dishes.navigation.soup") },
  { key: 'main-dishes', name: t("dishes.categories.hlavn√≠ j√≠dla"), icon: 'üçñ', navName: t("dishes.navigation.mainDish") },
  { key: 'sweet', name: t("dishes.categories.sladk√Ω"), icon: 'üç∞', navName: t("dishes.navigation.sweet") },
  { key: 'snacks', name: t("dishes.categories.snacks"), icon: 'ü•™', navName: t("dishes.navigation.snack") }
];

// Group dishes by category using the configuration
const dishesByCategory: Record<string, DishEntry[]> = Object.fromEntries(
  categoryConfig.map(({ key }) => [
    key,
    sortDishesByOrder(allDishes.filter(dish => dish.data.category === key))
  ])
);

// Sort drinks by KarelMustTry first, then by order field
const sortedDrinks: DrinkEntry[] = sortDrinksByOrder(allDrinks);

// Create category names mapping from configuration
const categoryNames: Record<string, string> = Object.fromEntries([
  ...categoryConfig.map(cat => [cat.key, cat.name]),
  ['drinks', t("dishes.categories.drinks")]
]);

const meta = {
  title: t("dishes.title"),
  description: t("dishes.description"),
};
---

<Layout meta={meta}>
  <!-- Sticky Navigation -->
  <nav class="sticky top-[72px] md:top-16 z-40 bg-white/95 backdrop-blur-sm border-b border-gray-200 py-4">
    <div class="max-w-6xl mx-auto px-4">
      <div class="flex gap-4 md:gap-6 overflow-x-auto scrollbar-hide">
        {categoryConfig.map(({ key: category, name: categoryName }) => (
          dishesByCategory[category]?.length > 0 && (
            <a 
              href={`#${category}`} 
              class="whitespace-nowrap text-sm font-medium text-gray-600 hover:text-red-600 transition"
            >
              {categoryName}
            </a>
          )
        ))}
        <a href="#drinks" class="whitespace-nowrap text-sm font-medium text-gray-600 hover:text-red-600 transition">
          Drinks
        </a>
      </div>
    </div>
  </nav>

  <main class="min-h-screen bg-gradient-to-b from-amber-50 to-white">
    <!-- Back Navigation -->
    <div class="bg-gray-50 py-4">
      <div class="max-w-6xl mx-auto px-4">
        <a href={`/${lang}/`} class="text-red-600 hover:text-red-700 font-medium">
          ‚Üê {t("hero.title")}
        </a>
      </div>
    </div>

    <!-- Hero Section -->
    <section class="py-16">
      <div class="max-w-4xl mx-auto px-4 text-center">
        <h1 class="text-5xl md:text-6xl font-bold text-gray-900 mb-6">
          {t("dishes.title")}
        </h1>
        <p class="text-xl md:text-2xl text-gray-600 max-w-3xl mx-auto">
          {t("dishes.description")}
        </p>
      </div>
    </section>

    <!-- Navigation Section -->
    <section class="py-12 bg-gray-50">
      <div class="max-w-6xl mx-auto px-4">
        <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {categoryConfig.map(({ key, icon, navName }) => (
            dishesByCategory[key]?.length > 0 && (
              <a href={`#${key}`} class="group bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-all hover:scale-105">
                <div class="text-4xl mb-4">{icon}</div>
                <h3 class="text-xl font-bold text-gray-900 group-hover:text-amber-600 transition-colors">
                  {navName}
                </h3>
              </a>
            )
          ))}
          <a href="#drinks" class="group bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-all hover:scale-105 md:col-span-2 lg:col-span-1">
            <div class="text-4xl mb-4">üç∫</div>
            <h3 class="text-xl font-bold text-gray-900 group-hover:text-amber-600 transition-colors">
              {t("dishes.navigation.drinks")}
            </h3>
          </a>
        </div>
      </div>
    </section>

    {categoryConfig.map(({ key: category, name: categoryName }) => (
      dishesByCategory[category]?.length > 0 && (
        <section id={category} class="py-16">
          <div class="max-w-6xl mx-auto px-4">
            <h2 class="text-4xl font-bold text-center mb-12 text-red-600">
              {categoryName}
            </h2>
            
            <div class="space-y-12">
              {dishesByCategory[category].map((dish, index) => (
                <div class={`bg-white rounded-xl shadow-lg overflow-hidden max-w-4xl mx-auto ${index % 2 === 0 ? '' : 'lg:flex-row-reverse'}`}>
                  <div class="lg:flex">
                    <div class="lg:w-1/2">
                      {dish.data.image && (
                        <img 
                          src={dish.data.image} 
                          alt={dish.data.name}
                          class="w-full h-64 lg:h-full object-cover cursor-pointer hover:opacity-90 transition dish-image"
                          data-image={dish.data.image}
                          data-name={dish.data.name}
                          data-description={dish.data.whyTry}
                        />
                      )}
                    </div>
                    <div class="lg:w-1/2 p-8">
                      <div class="flex items-center gap-2 mb-4">
                        {dish.data.KarelMustTry && (
                          <span class="text-sm font-bold px-3 py-1 rounded-full text-purple-600 bg-purple-100 border border-purple-200">
    {t("sections.karelHighlyRecommends")}
                          </span>
                        )}
                        <span class={`text-sm font-medium px-3 py-1 rounded-full ${
                          category === 'sweet' ? 'text-amber-600 bg-amber-100' :
                          category === 'main-dishes' ? 'text-red-600 bg-red-100' :
                          category === 'soups' ? 'text-yellow-600 bg-yellow-100' :
                          'text-green-600 bg-green-100'
                        }`}>
                          {categoryNames[category]}
                        </span>
                      </div>
                      <h3 class="text-3xl font-bold text-gray-900 mb-2">
                        {dish.data.name}
                      </h3>
                      <p class="text-gray-600 text-lg mb-4">
                        {dish.data.description}
                      </p>
                      <p class="text-gray-700 mb-6">
                        {dish.data.whyTry}
                      </p>
                      <div class="bg-gray-50 p-4 rounded-lg">
                        <p class="text-sm text-gray-600 italic">
                          "{dish.data.quote}" 
                          <span class="font-medium">- {dish.data.author}</span>
                        </p>
                      </div>
                      
                      {dish.data.whereToGet && (
                        <div class="mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
                          <p class="text-sm text-blue-800 mb-2">
                            <strong>Where to get it:</strong> {dish.data.whereToGet}
                          </p>
                          {dish.data.restaurantLink && (
                            <a 
                              href={dish.data.restaurantLink}
                              class="inline-block text-sm bg-blue-600 text-white px-3 py-1 rounded-lg hover:bg-blue-700 transition"
                            >
{t("dishes.visitRestaurant")}
                            </a>
                          )}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </section>
      )
    ))}

    <!-- Drinks Section -->
    <section id="drinks" class="py-16 bg-gray-50">
      <div class="max-w-6xl mx-auto px-4">
        <h2 class="text-4xl font-bold text-center mb-12 text-red-600">{t("dishes.categories.drinks")}</h2>
        
        <div class="space-y-12">
          {sortedDrinks.map((drink, index) => (
            <div class={`bg-white rounded-xl shadow-lg overflow-hidden max-w-4xl mx-auto ${index % 2 === 0 ? '' : 'lg:flex-row-reverse'}`}>
              <div class="lg:flex">
                <div class="lg:w-1/2">
                  {drink.data.image && (
                    <img 
                      src={drink.data.image} 
                      alt={drink.data.name}
                      class="w-full h-64 lg:h-full object-cover cursor-pointer hover:opacity-90 transition drink-image"
                      data-image={drink.data.image}
                      data-name={drink.data.name}
                      data-description={drink.data.whyTry}
                    />
                  )}
                </div>
                <div class="lg:w-1/2 p-8">
                  <div class="flex items-center gap-2 mb-4">
                    {drink.data.KarelMustTry && (
                      <span class="text-sm font-bold px-3 py-1 rounded-full text-purple-600 bg-purple-100 border border-purple-200">
{t("sections.karelHighlyRecommends")}
                      </span>
                    )}
                    <span class={`text-sm font-medium px-3 py-1 rounded-full ${
                      drink.data.type === 'beer' ? 'text-yellow-600 bg-yellow-100' :
                      drink.data.type === 'soda' ? 'text-purple-600 bg-purple-100' :
                      drink.data.type === 'spirit' ? 'text-orange-600 bg-orange-100' :
                      'text-red-600 bg-red-100'
                    }`}>
                      {drink.data.type === 'beer' ? t("categories.beer") :
                       drink.data.type === 'soda' ? t("categories.drink") :
                       drink.data.type === 'spirit' ? t("categories.spirit") :
                       t("categories.wine")}
                    </span>
                  </div>
                  <h3 class="text-3xl font-bold text-gray-900 mb-2">
                    {drink.data.name}
                  </h3>
                  <p class="text-gray-600 text-lg mb-4">
                    {drink.data.description}
                  </p>
                  <p class="text-gray-700 mb-6">
                    {drink.data.whyTry}
                  </p>
                  <div class="bg-gray-50 p-4 rounded-lg">
                    <p class="text-sm text-gray-600 italic">
                      "{drink.data.quote}" 
                      <span class="font-medium">- {drink.data.author}</span>
                    </p>
                  </div>
                  
                  {drink.data.whereToGet && (
                    <div class="mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
                      <p class="text-sm text-blue-800">
                        <strong>Where to get it:</strong> {drink.data.whereToGet}
                      </p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>
  </main>

  <!-- Back to Top Button -->
  <button 
    id="backToTop" 
    class="fixed bottom-6 right-6 bg-red-600 hover:bg-red-700 text-white rounded-full p-3 shadow-lg transition-all duration-300 opacity-0 pointer-events-none z-50"
    aria-label="Back to top"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
    </svg>
  </button>

  <!-- Image Modal -->
  <div id="imageModal" class="fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center hidden p-4">
    <div class="relative max-w-6xl max-h-full w-full">
      <img id="modalImage" src="" alt="" class="max-w-full max-h-[70vh] object-contain rounded-lg mx-auto block" />
      
      <!-- Close Button -->
      <button 
        onclick="closeImageModal()" 
        class="absolute top-4 right-4 text-white bg-black bg-opacity-50 rounded-full w-10 h-10 flex items-center justify-center hover:bg-opacity-75 transition z-10"
      >
        ‚úï
      </button>
      
      <!-- Navigation Arrows -->
      <button 
        id="prevButton"
        onclick="navigateImage(-1)" 
        class="absolute left-4 top-1/2 transform -translate-y-1/2 text-white bg-black bg-opacity-50 rounded-full w-12 h-12 flex items-center justify-center hover:bg-opacity-75 transition text-xl"
      >
        ‚Äπ
      </button>
      <button 
        id="nextButton"
        onclick="navigateImage(1)" 
        class="absolute right-4 top-1/2 transform -translate-y-1/2 text-white bg-black bg-opacity-50 rounded-full w-12 h-12 flex items-center justify-center hover:bg-opacity-75 transition text-xl"
      >
        ‚Ä∫
      </button>
      
      <!-- Caption and Description -->
      <div class="absolute bottom-4 left-4 right-4 text-white bg-black bg-opacity-75 p-4 rounded-lg">
        <h3 id="modalCaption" class="text-xl font-bold mb-2 text-center"></h3>
        <p id="modalDescription" class="text-sm text-gray-200 text-center"></p>
      </div>
      
      <!-- Image Counter -->
      <div class="absolute top-4 left-4 text-white bg-black bg-opacity-50 px-3 py-1 rounded-lg text-sm">
        <span id="imageCounter">1 / 1</span>
      </div>
    </div>
  </div>
</Layout>

<script>
  let allDishes: Array<{image: string, name: string, description: string}> = [];
  let currentImageIndex = 0;

  // Back to top functionality
  function scrollToTop() {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  }

  document.addEventListener('DOMContentLoaded', function() {
    // Back to top button visibility
    const backToTopButton = document.getElementById('backToTop');
    
    function toggleBackToTopButton() {
      if (window.scrollY > 300) {
        backToTopButton.classList.remove('opacity-0', 'pointer-events-none');
        backToTopButton.classList.add('opacity-100');
      } else {
        backToTopButton.classList.add('opacity-0', 'pointer-events-none');
        backToTopButton.classList.remove('opacity-100');
      }
    }
    
    // Add click event listener to back to top button
    backToTopButton.addEventListener('click', scrollToTop);
    
    // Check scroll position on page load and scroll
    toggleBackToTopButton();
    window.addEventListener('scroll', toggleBackToTopButton);
    // Check if device is mobile
    const isMobile = window.matchMedia('(max-width: 768px)').matches || 
                     /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    
    // Collect all dish and drink data
    const dishImages = document.querySelectorAll('.dish-image');
    const drinkImages = document.querySelectorAll('.drink-image');
    
    const dishData = Array.from(dishImages).map(img => ({
      image: img.getAttribute('data-image') ?? '',
      name: img.getAttribute('data-name') ?? '',
      description: img.getAttribute('data-description') ?? ''
    }));
    
    const drinkData = Array.from(drinkImages).map(img => ({
      image: img.getAttribute('data-image') ?? '',
      name: img.getAttribute('data-name') ?? '',
      description: img.getAttribute('data-description') ?? ''
    }));
    
    // Combine all image data
    allDishes = [...dishData, ...drinkData];

    // Only add click listeners if NOT on mobile
    if (!isMobile) {
      // Add click listeners to all dish images
      dishImages.forEach((img, index) => {
        img.addEventListener('click', function() {
          currentImageIndex = index;
          openImageModal();
        });
      });
      
      // Add click listeners to all drink images
      drinkImages.forEach((img, index) => {
        img.addEventListener('click', function() {
          currentImageIndex = dishData.length + index; // Offset by dish count
          openImageModal();
        });
      });
    } else {
      // Remove cursor pointer on mobile to indicate images are not clickable
      dishImages.forEach(img => {
        img.classList.remove('cursor-pointer');
        img.classList.remove('hover:opacity-90');
      });
      drinkImages.forEach(img => {
        img.classList.remove('cursor-pointer');
        img.classList.remove('hover:opacity-90');
      });
    }
  });

  function openImageModal() {
    const modal = document.getElementById('imageModal');
    if (!modal) return;
    
    updateModalContent();
    modal.classList.remove('hidden');
    
    // Close on background click
    modal.onclick = function(event) {
      if (event.target === modal) {
        closeImageModal();
      }
    }
    
    // Keyboard navigation
    document.addEventListener('keydown', handleKeyboard);
  }
  
  function updateModalContent() {
    const dish = allDishes[currentImageIndex];
    const modalImage = document.getElementById('modalImage') as HTMLImageElement;
    const modalCaption = document.getElementById('modalCaption');
    const modalDescription = document.getElementById('modalDescription');
    const imageCounter = document.getElementById('imageCounter');
    
    if (modalImage) {
      modalImage.src = dish.image;
      modalImage.alt = dish.name;
    }
    if (modalCaption) modalCaption.textContent = dish.name;
    if (modalDescription) modalDescription.textContent = dish.description;
    if (imageCounter) imageCounter.textContent = `${currentImageIndex + 1} / ${allDishes.length}`;
    
    // Show/hide navigation buttons
    const prevButton = document.getElementById('prevButton') as HTMLElement;
    const nextButton = document.getElementById('nextButton') as HTMLElement;
    if (prevButton) prevButton.style.display = currentImageIndex > 0 ? 'flex' : 'none';
    if (nextButton) nextButton.style.display = currentImageIndex < allDishes.length - 1 ? 'flex' : 'none';
  }
  
  function navigateImage(direction: number) {
    const newIndex = currentImageIndex + direction;
    if (newIndex >= 0 && newIndex < allDishes.length) {
      currentImageIndex = newIndex;
      updateModalContent();
    }
  }
  
  function handleKeyboard(event: KeyboardEvent) {
    switch(event.key) {
      case 'Escape':
        closeImageModal();
        break;
      case 'ArrowLeft':
        navigateImage(-1);
        break;
      case 'ArrowRight':
        navigateImage(1);
        break;
    }
  }
  
  function closeImageModal() {
    const modal = document.getElementById('imageModal');
    if (modal) {
      modal.classList.add('hidden');
    }
    document.removeEventListener('keydown', handleKeyboard);
  }
</script>

<style>
  html {
    scroll-behavior: smooth;
  }
  
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
</style>