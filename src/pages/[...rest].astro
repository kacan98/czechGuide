---
import Layout from "@layouts/Layout.astro";
// @ts-ignore
import Map from "@components/Map.vue";
import { getCollection, type CollectionEntry } from "astro:content";
import { useTranslations, getLangFromUrl, getLocalizedUrl } from "@/util/translate";
import { sharedRestaurantData, type RestaurantId } from "@/data/shared-restaurant-data";

type RestaurantEntry = CollectionEntry<"restaurants">;

export async function getStaticPaths() {
  const restaurants = await getCollection("restaurants");
  const restaurantPairs = new globalThis.Map<string, { en: RestaurantEntry | null; sv: RestaurantEntry | null }>();
  
  // Group restaurants by their clean slug (e.g., "lokal-dlouha")
  restaurants.forEach((restaurant) => {
    const cleanSlug = restaurant.slug.replace(/^(en|sv)\//, '');
    if (!restaurantPairs.has(cleanSlug)) {
      restaurantPairs.set(cleanSlug, { en: null, sv: null });
    }
    const lang = restaurant.id.startsWith('sv/') ? 'sv' : 'en';
    const versions = restaurantPairs.get(cleanSlug)!;
    versions[lang] = restaurant;
  });
  
  // Create paths for both languages  
  const paths: Array<{
    params: { rest: string };
    props: Props;
  }> = [];
  
  Array.from(restaurantPairs.entries()).forEach(([cleanSlug, versions]) => {
    // English path: /restaurant/u-cerneho-vola
    paths.push({
      params: { rest: `restaurant/${cleanSlug}` },
      props: { 
        enRestaurant: versions.en,
        svRestaurant: versions.sv,
        allRestaurants: restaurants
      },
    });
    
    // Swedish path: /sv/restaurant/u-cerneho-vola
    paths.push({
      params: { rest: `sv/restaurant/${cleanSlug}` },
      props: { 
        enRestaurant: versions.en,
        svRestaurant: versions.sv,
        allRestaurants: restaurants
      },
    });
  });
  
  return paths;
}

type Props = {
  enRestaurant: RestaurantEntry | null;
  svRestaurant: RestaurantEntry | null;
  allRestaurants: RestaurantEntry[];
};

const { enRestaurant, svRestaurant, allRestaurants } = Astro.props;

// Get the rest parameter and check if it's a restaurant route
const restPath = Astro.params.rest as string;
const isRestaurantRoute = restPath.includes('restaurant/');

// If not a restaurant route, return 404
if (!isRestaurantRoute) {
  return new Response(null, {
    status: 404,
    statusText: 'Not Found'
  });
}

// Get current language from URL
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Select the correct restaurant based on current language
const restaurant = lang === 'sv' ? svRestaurant : enRestaurant;

// Create unified data object by merging shared data with restaurant data
const sharedDataKey = restaurant?.data.sharedData as RestaurantId;
const sharedData = sharedDataKey ? sharedRestaurantData[sharedDataKey] : null;

// Merge shared data (technical details) with restaurant data (translatable content)
const restaurantData = {
  // Restaurant-specific translatable data
  name: restaurant?.data.name,
  description: restaurant?.data.description,
  cuisine: restaurant?.data.cuisine,
  recommended: restaurant?.data.recommended,
  
  // Technical data from shared source, with fallbacks to restaurant data
  address: sharedData?.address || restaurant?.data.address,
  location: sharedData?.location || restaurant?.data.location,
  hours: sharedData?.hours || restaurant?.data.hours,
  website: sharedData?.website || restaurant?.data.website,
  phone: sharedData?.phone || restaurant?.data.phone,
  googleMapsUrl: sharedData?.googleMapsUrl || restaurant?.data.googleMapsUrl,
  googleRating: sharedData?.googleRating || restaurant?.data.googleRating,
  googleReviews: sharedData?.googleReviews || restaurant?.data.googleReviews,
  image: sharedData?.image || restaurant?.data.image,
  category: sharedData?.category || restaurant?.data.category,
  priceRange: sharedData?.priceRange || restaurant?.data.priceRange
};

// Filter restaurants by current language and exclude current restaurant
const languageRestaurants = allRestaurants.filter((restaurant: RestaurantEntry) => restaurant.id.startsWith(`${lang}/`));
const otherRestaurants = languageRestaurants.filter(
  (r: RestaurantEntry) => r.slug !== restaurant?.slug
);

// Handle case where restaurant doesn't exist for current language
if (!restaurant) {
  return new Response(null, {
    status: 404,
    statusText: 'Restaurant not found for this language'
  });
}

const meta = {
  title: `${restaurantData.name} - ${t("site.title")}`,
  description: restaurantData.description,
};
---

<Layout meta={meta}>
  <main class="min-h-screen bg-white">
    <!-- Back Navigation -->
    <div class="bg-gray-50 py-4">
      <div class="mx-auto max-w-4xl px-4">
        <a href={getLocalizedUrl("", lang)} class="font-medium text-red-600 hover:text-red-700">
          ← {t("restaurant.backToGuide")}
        </a>
      </div>
    </div>

    <!-- Restaurant Header -->
    <section class="py-12">
      <div class="mx-auto max-w-4xl px-4">
        <!-- Action Buttons at Top -->
        <div class="mb-8 flex justify-center gap-4">
          {
            restaurantData.googleMapsUrl && (
              <a
                href={restaurantData.googleMapsUrl}
                target="_blank"
                rel="noopener noreferrer"
                class="rounded-lg bg-red-600 px-6 py-3 text-white transition hover:bg-red-700"
              >
                📍 {t("restaurant.navigateGoogleMaps")}
              </a>
            )
          }
          {
            restaurantData.website && (
              <a
                href={restaurantData.website}
                target="_blank"
                rel="noopener noreferrer"
                class="rounded-lg border-2 border-gray-900 bg-white px-6 py-3 text-gray-900 transition hover:bg-gray-100"
              >
                🌐 {t("restaurant.visitWebsite")}
              </a>
            )
          }
        </div>

        <div class="grid items-center gap-8 md:grid-cols-2">
          <div>
            <h1 class="mb-4 text-4xl font-bold text-gray-900 md:text-5xl">
              {restaurantData.name}
            </h1>
            <p class="mb-6 text-xl text-gray-600">
              {restaurantData.description}
            </p>
            <div class="mb-6 flex flex-wrap gap-4">
              <span
                class="rounded-full bg-amber-100 px-3 py-1 text-sm font-medium text-amber-800"
              >
                {restaurantData.cuisine}
              </span>
              {restaurantData.priceRange && (
                <span
                  class="rounded-full bg-green-100 px-3 py-1 text-sm font-medium text-green-800"
                >
                  {restaurantData.priceRange}
                </span>
              )}
              {
                restaurantData.googleRating && (
                  <span class="rounded-full bg-blue-100 px-3 py-1 text-sm font-medium text-blue-800">
                    ⭐ {restaurantData.googleRating} (
                    {restaurantData.googleReviews} {t("restaurant.reviews")})
                  </span>
                )
              }
            </div>
          </div>

          {
            restaurantData.image && (
              <div class="overflow-hidden rounded-xl shadow-lg">
                <img
                  src={restaurantData.image}
                  alt={restaurantData.name}
                  class="h-64 w-full object-cover"
                />
              </div>
            )
          }
        </div>
      </div>
    </section>

    <!-- Restaurant Details -->
    <section class="bg-gray-50 py-12">
      <div class="mx-auto max-w-4xl px-4">
        <div class="grid gap-8 md:grid-cols-3">
          <!-- Contact Info -->
          <div class="rounded-lg bg-white p-6 shadow-md">
            <h3 class="mb-4 text-lg font-bold">{t("restaurant.contactLocation")}</h3>
            <div class="space-y-3">
              <div>
                <span class="font-medium text-gray-700">{t("restaurant.address")}</span>
                <p class="text-gray-600">{restaurantData.address}</p>
              </div>
              {
                restaurantData.phone && (
                  <div>
                    <span class="font-medium text-gray-700">{t("restaurant.phone")}</span>
                    <p class="text-gray-600">{restaurantData.phone}</p>
                  </div>
                )
              }
              {
                restaurantData.website && (
                  <div>
                    <a
                      href={restaurantData.website}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="inline-flex items-center text-red-600 hover:text-red-700"
                    >
                      {t("restaurant.visitWebsite")} →
                    </a>
                  </div>
                )
              }
            </div>
          </div>

          <!-- Map -->
          <div class="rounded-lg bg-white p-6 shadow-md md:col-span-2">
            <h3 class="mb-4 text-lg font-bold">{t("restaurant.location")}</h3>
            <div class="h-96 overflow-hidden rounded-lg">
              <Map restaurants={[restaurant]} sharedRestaurantData={sharedRestaurantData} sharedAttractionData={{}} lang={lang} client:only="vue" />
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Recommended Dishes -->
    {
      restaurantData.recommended && restaurantData.recommended.length > 0 && (
        <section class="py-12">
          <div class="mx-auto max-w-4xl px-4">
            <h2 class="mb-12 text-center text-3xl font-bold">
              {t("restaurant.recommendedDishes")}
            </h2>
            <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
              {restaurantData.recommended?.map((dish: { name: string; description: string; image?: string }) => (
                <div class="overflow-hidden rounded-lg bg-white shadow-md">
                  {dish.image && (
                    <img
                      src={dish.image}
                      alt={dish.name}
                      class="h-32 w-full object-cover"
                    />
                  )}
                  <div class="p-4">
                    <h3 class="mb-2 font-bold text-gray-900">{dish.name}</h3>
                    <p class="text-sm text-gray-600">{dish.description}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </section>
      )
    }

    <!-- Other Restaurants -->
    <section class="bg-gray-50 py-12">
      <div class="mx-auto max-w-6xl px-4">
        <h2 class="mb-12 text-center text-3xl font-bold">
          {t("restaurant.otherRestaurants")}
        </h2>
        <div class="mb-12 grid gap-8 md:grid-cols-2 lg:grid-cols-3">
          {
            otherRestaurants.map((otherRestaurant: RestaurantEntry) => (
              <div class="overflow-hidden rounded-xl bg-white shadow-lg transition hover:shadow-xl">
                <div class="relative h-48 bg-gray-300">
                  {otherRestaurant.data.image && (
                    <img
                      src={otherRestaurant.data.image}
                      alt={otherRestaurant.data.name}
                      class="h-full w-full object-cover"
                    />
                  )}
                </div>
                <div class="p-6">
                  <div class="mb-3 flex items-center gap-2">
                    <span
                      class={`rounded-full px-2 py-1 text-xs font-medium ${
                        otherRestaurant.data.category === "restaurant"
                          ? "bg-red-100 text-red-600"
                          : otherRestaurant.data.category === "pub"
                            ? "bg-orange-100 text-orange-600"
                            : otherRestaurant.data.category === "bistro"
                              ? "bg-amber-100 text-amber-600"
                              : "bg-green-100 text-green-600"
                      }`}
                    >
                      {t(`restaurant.categories.${otherRestaurant.data.category}`)}
                    </span>
                    <span class="text-xs text-gray-500">
                      {otherRestaurant.data.priceRange}
                    </span>
                  </div>
                  <h3 class="mb-2 text-xl font-bold">
                    {otherRestaurant.data.name}
                  </h3>
                  <p class="mb-4 text-gray-600">
                    {otherRestaurant.data.description}
                  </p>
                  <div class="flex items-center justify-between">
                    <span class="text-sm text-gray-500">
                      {otherRestaurant.data.cuisine}
                    </span>
                    <a
                      href={getLocalizedUrl(`restaurant/${otherRestaurant.slug.replace(/^(en|sv)\//, '')}`, lang)}
                      class="text-sm font-medium text-red-600 hover:text-red-700"
                    >
                      {t("restaurant.visit")} →
                    </a>
                  </div>
                </div>
              </div>
            ))
          }
        </div>

        <!-- Navigation Buttons -->
        <div class="flex justify-center gap-4">
          <a
            href={getLocalizedUrl("", lang)}
            class="rounded-lg bg-gray-600 px-6 py-3 text-white transition hover:bg-gray-700"
          >
            ← {t("restaurant.viewAllRestaurants")}
          </a>
        </div>
      </div>
    </section>
  </main>
</Layout>

<style>
  .prose h2 {
    @apply mb-4 mt-8 text-2xl font-bold text-gray-900;
  }

  .prose h3 {
    @apply mb-3 mt-6 text-xl font-bold text-gray-900;
  }

  .prose p {
    @apply mb-4 text-gray-700;
  }

  .prose ul {
    @apply list-inside list-disc space-y-2 text-gray-700;
  }

  .prose ol {
    @apply list-inside list-decimal space-y-2 text-gray-700;
  }

  .prose strong {
    @apply font-bold text-gray-900;
  }
</style>
